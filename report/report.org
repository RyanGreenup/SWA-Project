#+TITLE: Analysing Twitter for Ubisoft
:SETUP:
#+INFOJS_OPT: view:info toc:3
#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
#+OPTIONS: tex:t
#+TODO: TODO IN-PROGRESS WAITING DONE
#+CATEGORY: TAD
:END:
:HTML:
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="style.css">
# Not embedding the HTML is faster, enable toggle-org-custom-inline-style when
    # you want that feature
#+CSL_STYLE: /home/ryan/Templates/CSL/nature.csl
:END:
:R:
#+PROPERTY: header-args: R :results output :session swaproj :dir ~/Dropbox/Notes/DataSci/Social_Web_Analytics/SWA-Project/report/ :cache yes
:END:
:SlowDown:
# #+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage{/home/ryan/Dropbox/profiles/Templates/LaTeX/ScreenStyle}
# #+LATEX_HEADER: \twocolumn
# [[/home/ryan/Dropbox/profiles/Templates/LaTeX/ScreenStyle.sty]]
:END:


* 8.1 Analysing the Relationship Between Friends and Followers for Twitter Users
** 8.1.1 Retrieve the posts from Twitter
relevant posts can be retrieved from twitter by utilising the =rtweet= package, packages can be loaded for use in **_R_** thusly:

#+NAME: lpac
#+CAPTION: Load the Packages for **/R/**
#+begin_src R :output none :results none
# Load Packages -----------------------------------------------------------
setwd("~/Dropbox/Notes/DataSci/Social_Web_Analytics/SWA-Project/scripts/")

if (require("pacman")) {
  library(pacman)
} else{
  install.packages("pacman")
  library(pacman)
}

pacman::p_load(xts, sp, gstat, ggplot2, rmarkdown, reshape2,
               ggmap, parallel, dplyr, plotly, tidyverse,
               reticulate, UsingR, Rmpfr, swirl, corrplot,
               gridExtra, mise, latex2exp, tree, rpart,
               lattice, coin, primes, epitools, maps, clipr,
               ggmap, twitteR, ROAuth, tm, rtweet, base64enc,
               httpuv, SnowballC, RColorBrewer, wordcloud,
               ggwordcloud, tidyverse, boot)
#+end_src


The =rtweet= API will search for tweets that contain all the words of a query
regardless of uppercase or lowercase usage cite:kearney2019.

In order to leverage the /Twitter/ API it is necessary to use tokens provided through a /Twitter/ developer account:

#+NAME: tkn
#+CAPTION: Import the twitter tokens (redacted)
#+begin_src R
# Set up Tokens ===========================================================

options(RCurlOptions = list(
  verbose = FALSE,
  capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
  ssl.verifypeer = FALSE
))

setup_twitter_oauth(
  consumer_key = "*************************",
  consumer_secret = "**************************************************",
  access_token = "**************************************************",
  access_secret = "*********************************************"
)

# rtweet ==================================================================
tk <-    rtweet::create_token(
  app = "SWA",
  consumer_key    = "*************************",
  consumer_secret = "**************************************************",
  access_token    = "**************************************************",
  access_secret   = "*********************************************",
  set_renv        = FALSE
#+end_src

and hence all tweets containing a mention of /Ubisoft/ can be returned and saved to disk as shown in listing [[save]]:

#+NAME: save
#+CAPTION: Save the Tweets to the HDD as an ~rdata~ file
#+begin_src R
 n <- 1000
 tweets.company <- search_tweets(q = 'ubisoft', n = n, token = tk,
                                 include_rts = FALSE)
 save(tweets.company[,], file = "resources/Download_1.Rdata")
#+end_src

** 8.2.2 Count of Followers and Friends
In order to identify the number of users that are contained in the /tweets/ the
=unique()= function can be used to return a vector of names which can then be passed as an index to the vector of counts as shown in listing [[count]], this provides that 81.7% of the tweets are by unique users.

#+NAME: count
#+CAPTION: Return follower count of twitter posts
#+begin_src R
(users <- unique(tweets.company$name)) %>% length()
x <- tweets.company$followers_count[duplicated(tweets.company$name)]
y <- tweets.company$friends_count[duplicated(tweets.company$name)]

## > [1] 817
#+end_src


** 8.1.3 Summary Statistics
The average number of friends and followers from users who posted tweets mentioning /Ubisoft/ can be returned using the ~mean()~ as shown in listing [[mean]]
this provides that on average each user has 586 friends and 63,620 followers.

#+NAME: mean
#+CAPTION: Determine the average number of friends and followers
#+begin_src R
x<- rnorm(090)
y<- rnorm(090)
(xbar <- mean(x))
(ybar <- mean(y))

## > [1] 4295.195
## > [1] 435.9449
#+end_src

** 8.1.4 Above Average Followers
Each user can be compared to the average number of followers, by using a logical
operator on the vector (e.g. ~y > ybar~), this will return an output of logical
values. */R/* will coerce logicals into 1/0 values meaning that the mean value
will return the proportion of =TRUE= responses as shown in listing [[pyhat]]. This
provides that 20.6% of the users identified have above average friend counts, while only 2.4% have an above average numbmer of followers.

#+NAME: pyhat
#+CAPTION: Calculate the proportion of users with above average follower counts
#+begin_src R
(px_hat <- mean(x>xbar))
(py_hat <- mean(y>ybar))

## > [1] 0.0244798
## > [1] 0.2729498
#+end_src


** 8.1.5 Bootstrap confidence intervals
*** a.) Generate a bootsrap distribution

A bootstrap assumes that the population is an infinitely large repetition of the
sample, a bootstrap of the follower counts can be produced by resampling with
replacement/repetition and plotted using the =ggplot2= library as shown in
listing [[btpop]] and figure [[btpopfg]].

This shows that the population follower counts is a non-normal skew-right
distribution, which is expected because the number of friends is an integer value bound by zero cite:nist2013.

#+NAME: btpop
#+CAPTION: Bootstrapping a population from the sample.
#+begin_src R
## Resample the Data
kt_pop <- sample(x, size = 10^6, replace = TRUE)

## Make the Population
bt_pop_data <- tibble("Followers" = bt_pop)
ggplot(data = bt_pop_data, aes(x = Followers)) +
  geom_histogram(aes(y = ..density..), fill = "lightblue", bins = 35, col = "pink") +
  geom_density(col = "violetred2") +
  scale_x_continuous(limits = c(1, 800)) +
  theme_bw() +
  labs(x = "Number of Followers", y = "Density",
       title = "Bootstrapped population of Follower Numbers")

#+end_src


#+attr_html: :width 400px
#+attr_latex: :width 12cm
#+NAME: btpopfg
#+CAPTION: Histogram of the bootrapped population of follower counts
[[./Figures/BootStrap_Pop.png]]

*** b.) Estimate a Confidence Interval for Follower Counts

* References
# Remember, this is here for HTML and autocomplete, but latex uses biblatex for URL support
# bibliography:/home/ryan/Dropbox/Studies/Papers/references.bib
# I (Ryan) am managing this with zotero, please don't touch, I'll figure out how to sync the citations later or we can all just switch to a =.bib= file.
<<bibliography link>>
bibliography:./references.bib

<<bibliographystyle link>>
 bibliographystyle:unsrt
