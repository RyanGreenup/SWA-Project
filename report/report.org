#+TITLE: Analysing Twitter for Ubisoft
:SETUP:
#+INFOJS_OPT: view:info toc:3
#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
#+OPTIONS: tex:t
#+TODO: TODO IN-PROGRESS FIXME DONE
#+CATEGORY: TAD
:END:
:HTML:
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="style.css">
# Not embedding the HTML is faster, enable toggle-org-custom-inline-style when
    # you want that feature
#+CSL_STYLE: /home/ryan/Templates/CSL/nature.csl
:END:
:R:
#+PROPERTY: header-args: R :results output :session swaproj :dir ~/Dropbox/Notes/DataSci/Social_Web_Analytics/SWA-Project/report/ :cache yes
:END:
:SlowDown:
# #+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage{/home/ryan/Dropbox/profiles/Templates/LaTeX/ScreenStyle}
# #+LATEX_HEADER: \twocolumn
# [[/home/ryan/Dropbox/profiles/Templates/LaTeX/ScreenStyle.sty]]
:END:
:LaTeX:
#+latex_header: \usepackage[citestyle=numeric, bibstyle=numeric,hyperref=true,backref=true, maxcitenames=3,url=true,backend=biber,natbib=true]{biblatex}
#+latex_header: \addbibresource{/home/ryan/Dropbox/Studies/Papers/references.bib}
#+latex_header: %%% TeX-command-extra-options: "-shell-escape"
:END:

* 8.1 Analysing the Relationship Between Friends and Followers for Twitter Users
** 8.1.1 Retrieve the posts from Twitter
relevant posts can be retrieved from twitter by utilising the =rtweet= package, packages can be loaded for use in **_R_** thusly:

#+NAME: lpac
#+CAPTION: Load the Packages for **/R/**
#+begin_src R :output none :results none
# Load Packages -----------------------------------------------------------
setwd("~/Dropbox/Notes/DataSci/Social_Web_Analytics/SWA-Project/scripts/")

if (require("pacman")) {
  library(pacman)
} else{
  install.packages("pacman")
  library(pacman)
}

pacman::p_load(xts, sp, gstat, ggplot2, rmarkdown, reshape2,
               ggmap, parallel, dplyr, plotly, tidyverse,
               reticulate, UsingR, Rmpfr, swirl, corrplot,
               gridExtra, mise, latex2exp, tree, rpart,
               lattice, coin, primes, epitools, maps, clipr,
               ggmap, twitteR, ROAuth, tm, rtweet, base64enc,
               httpuv, SnowballC, RColorBrewer, wordcloud,
               ggwordcloud, tidyverse, boot)
#+end_src


The =rtweet= API will search for tweets that contain all the words of a query
regardless of uppercase or lowercase usage cite:kearney2019.

In order to leverage the /Twitter/ API it is necessary to use tokens provided through a /Twitter/ developer account:

#+NAME: tkn
#+CAPTION: Import the twitter tokens (redacted)
#+begin_src R
# Set up Tokens ===========================================================

options(RCurlOptions = list(
  verbose = FALSE,
  capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"),
  ssl.verifypeer = FALSE
))

setup_twitter_oauth(
  consumer_key = "*************************",
  consumer_secret = "**************************************************",
  access_token = "**************************************************",
  access_secret = "*********************************************"
)

# rtweet ==================================================================
tk <-    rtweet::create_token(
  app = "SWA",
  consumer_key    = "*************************",
  consumer_secret = "**************************************************",
  access_token    = "**************************************************",
  access_secret   = "*********************************************",
  set_renv        = FALSE
#+end_src

and hence all tweets containing a mention of /Ubisoft/ can be returned and saved to disk as shown in listing [[save]]:

#+NAME: save
#+CAPTION: Save the Tweets to the HDD as an ~rdata~ file
#+begin_src R
 n <- 1000
 tweets.company <- search_tweets(q = 'ubisoft', n = n, token = tk,
                                 include_rts = FALSE)
 save(tweets.company[,], file = "resources/Download_1.Rdata")
#+end_src

** 8.2.2 Count of Followers and Friends
In order to identify the number of users that are contained in the /tweets/ the
=unique()= function can be used to return a vector of names which can then be passed as an index to the vector of counts as shown in listing [[count]], this provides that 81.7% of the tweets are by unique users.

#+NAME: count
#+CAPTION: Return follower count of twitter posts
#+begin_src R
(users <- unique(tweets.company$name)) %>% length()
x <- tweets.company$followers_count[duplicated(tweets.company$name)]
y <- tweets.company$friends_count[duplicated(tweets.company$name)]

## > [1] 817
#+end_src


** 8.1.3 Summary Statistics
The average number of friends and followers from users who posted tweets mentioning /Ubisoft/ can be returned using the ~mean()~ as shown in listing [[mean]]
this provides that on average each user has 586 friends and 63,620 followers.

#+NAME: mean
#+CAPTION: Determine the average number of friends and followers
#+begin_src R
x<- rnorm(090)
y<- rnorm(090)
(xbar <- mean(x))
(ybar <- mean(y))

## > [1] 4295.195
## > [1] 435.9449
#+end_src

** 8.1.4 Above Average Followers
Each user can be compared to the average number of followers, by using a logical
operator on the vector (e.g. ~y > ybar~), this will return an output of logical
values. */R/* will coerce logicals into 1/0 values meaning that the mean value
will return the proportion of =TRUE= responses as shown in listing [[pyhat]]. This
provides that:

+ 2.4%  of the have identified have an above average *number of followers*.
+ 20.6% of the users identified have an above average *number of friends*.

#+NAME: pyhat
#+CAPTION: Calculate the proportion of users with above average follower counts
#+begin_src R
(px_hat <- mean(x>xbar))
(py_hat <- mean(y>ybar))

## > [1] 0.0244798
## > [1] 0.2729498
#+end_src


** 8.1.5 Bootstrap confidence intervals
*** a/b.) Generate a bootsrap distribution

A bootstrap assumes that the population is an infinitely large repetition of the
sample and may be produces with respect to follower counts by resampling with
replacement/repetition and plotted using the =ggplot2= library as deomonstrated
in listings [[btpop]] and [[btgg]] and shown in figure [[btpopfg]].

This shows that the population follower counts is a non-normal skew-right
distribution, which is expected because the number of friends is an integer value bound by zero cite:nist2013.

#+NAME: btpop
#+CAPTION: Bootstrapping a population from the sample.
#+begin_src R
## Resample the Data
(bt_pop <- sample(x, size = 10^6, replace = TRUE)) %>% head()

## > [1]   7 515 262 309 186 166
#+end_src

#+NAME: btgg
#+CAPTION:
#+begin_src r
## Make the Population
bt_pop_data <- tibble("Followers" = bt_pop)
ggplot(data = bt_pop_data, aes(x = Followers)) +
  geom_histogram(aes(y = ..density..), fill = "lightblue", bins = 35, col = "pink") +
  geom_density(col = "violetred2") +
  scale_x_continuous(limits = c(1, 800)) +
  theme_bw() +
  labs(x = "Number of Followers", y = "Density",
       title = "Bootstrapped population of Follower Numbers")

#+end_src

#+attr_html: :width 400px
#+attr_latex: :width 12cm
#+NAME: btpopfg
#+CAPTION: Histogram of the bootrapped population of follower counts
[[./Figures/BootStrap_Pop.png]]

*** c.) Estimate a Confidence Interval for the population mean Follower Counts
In order to perform a bootrap for the population mean value of follower counts it is necessary to:

1. Resample the data with replacement
   + i.e. randomly select values from the sample allowing for repetition
2. Measure the statistic of concern
3. Replicate this a sufficient number of times
   + i.e. Greater than or equal to 1000 times [[cite:davison1997][Ch. 5]]

This is equivalent to drawing a sample from a population that is infinitely large and constructed of repetitions of the sample. This can be performed in */R/* as shown in listing [[bt1s]].


#+NAME: bt1s
#+CAPTION: Confidence Interval of Mean Follower Count in Population
#+begin_src R
xbar_boot_loop <- replicate(10^3, {
  s <- sample(x, replace = TRUE)
  mean(s)
  })
quantile(xbar_boot_loop, c((1-0.97)/2, (1+0.97)/2))

##       1.5%      98.5%
##   588.4189 10228.7352
#+end_src

A 97% probability interval is such that a sample drawn from a population will contain the population mean in that interval 97% of the time, this means that it may be concluded with a high degree of certainty that the true population mean lies between 588 and 10228.

**** Alternative Approaches
If this data was normally distributed it may have been appropriate to consider
bootstrapping the standard error and using a $t$ distribution, however it is more appropriate to use a
percentile interval for skewed data such as this, in saying that however this method is not considered to be very accurate in the literature and is often too narrow. [[cite:hesterberg2015][Section 4.1]]

- It's worth noting that the normal $t$ value bootstrap offers no advantage over
  using a $t$ distribution (other than being illustrative of bootstrapping
  generally) [[cite:hesterberg2015][Section 4.1]]


  The =boot= package is a bootstrapping library common among authors in the data science sphere
  [[cite:james2013][p. 295]] [[cite:wiley2019][p. 237]] that implements
  confidence intervals consistent with work by Davison and Hinkley
  cite:ripley2020 in there texbook /Bootstrap Methods and their Application/.
 In this work it is provided that the $BC_{a}$ method of constructing confidence
  intervals is  superior to mere percentile
  methods in terms of accuracy [[cite:davison1997][Ch. 5]], a sentiment echoed in the literature. [[cite:carpenter2000,davison1997][Ch. 5]]

 Such methods can be implemented in */R/* by passing a function to the the =boot= call as shown in listing [[bootx]]. This provides a broader interval, providing that the true confidence interval could lie between 1079 and 16227 followers.

 #+NAME: bootx
 #+CAPTION: Bootstrap of population mean follower count implementing the $BC_{a}$ method
 #+begin_src r
xbar_boot <- boot(data = x, statistic = mean_val, R = 10^3)
boot.ci(xbar_boot, conf = 0.97, type = "bca", index = 1)

## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
## Based on 1000 bootstrap replicates
##
## CALL :
## boot.ci(boot.out = xbar_boot, conf = 0.97, type = "bca", index = 1)
##
## Intervals :
## Level       BCa
## 97%   ( 1079, 16227 )
## Calculations and Intervals on Original Scale
## Warning : BCa Intervals used Extreme Quantiles
## Some BCa intervals may be unstable
## Warning message:
## In norm.inter(t, adj.alpha) : extreme order statistics used as endpoints
 #+end_src

# * References
# Remember, this is here for HTML and autocomplete, but latex uses biblatex for URL support
# bibliography:/home/ryan/Dropbox/Studies/Papers/references.bib
# I (Ryan) am managing this with zotero, please don't touch, I'll figure out how to sync the citations later or we can all just switch to a =.bib= file.
<<bibliography link>>
bibliography:./references.bib

<<bibliographystyle link>>
 bibliographystyle:unsrt

*** d.) Estimate a Confidence Interval for the population mean Friend Counts
A Confidence interval for the population mean friend counts may be constructed in a like wise fashion as shown in listings [[booty]]. This provides that the 97% confidence interval for the population mean friend count is between 384 and 502 (or 387 and 496 if the $BC_{a}$ method used, they're quite close and so the more conservative percentile method will be accepted).

#+NAME: booty
#+CAPTION: Bootstrap of population mean follower count 
#+begin_src R
# d.) Estimate a Confidence Interval for the populattion mean Friend Count ===
# Using a Percentile Method #####################################################
ybar_boot_loop <- replicate(10^3, {
  s <- sample(y, replace = TRUE)
  mean(s)
  })
quantile(ybar_boot_loop, c(0.015, 0.985)

# Using BCA Method #############################################################
mean_val <- function(data, index) {
  X = data[index]
  return(mean(X))
}

xbar_boot <- boot(data = y, statistic = mean_val, R = 10^3)
boot.ci(xbar_boot, conf = 0.97, type = "bca", index = 1)


##     1.5%    98.5%
## 383.7619 501.5903
##
## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
## Based on 1000 bootstrap replicates
##
## CALL :
## boot.ci(boot.out = xbar_boot, conf = 0.97, type = "bca", index = 1)
##
## Intervals :
## Level       BCa
## 97%   (386.8, 496.7 )
## Calculations and Intervals on Original Scale
## Some BCa intervals may be unstable
#+end_src

** FIXME 8.1.6 Estimate a 97% Confidence Interval for the High Friend Count Proportion
:PROPERTIES:
:DIR:      /home/ryan/Dropbox/Notes/DataSci/Social_Web_Analytics/SWA-Project/docs/
:END:
In order to bootstrap a confidence interval for the proportion of users with
above average follower counts, repeteadly draw random samples from an infinitely
large population composed entirely of the sample, and record the sampled
proportion. this can be acheived by resampling the observations of above and
below as shown in listing [[phat]].

This provides that:
 + The 97% confidence interval for the population proportion of users that have an above average number of friends is between 0.24 and 0.31.
  + i.e. The probability of any given sample containing the population mean within this interval would be 97%, although  that doesn't however mean that there is a 97% probability that this interval contains the value, merely that we may be 97% /confident/

   #+begin_comment
   i.e. 97% of samples drawn from a population will have the population mean inside the corresponding confidence interval, So if we intended to sample a population and draw a confidence interval, that confidence interval would be the probability of any given sample containing the population mean.

   Given a sample however it is not correct to then conclude that the confidence interval is the probability of that sample containing the value because we simply have no information on how good the sample is at predicting the population, it could be a really biased sample and we can't really know what \mu is anyway.

   All we know is that if many samples were drawn and one randomly selected, the probability of that sample containing the poulation in the interval would be 97%

   See [[attachment:ConfIntNotes.pdf][this Attachment]]
   #+end_comment

#+NAME: phat
#+CAPTION: Bootstrap of Proportion of Friends above average
#+begin_src R
# 8.1.6 High Friend Count Proportion -------------------------------------------
prop <- factor(c("Below", "Above"))
## 1 is above average, 2 is below
py_hat_bt <- replicate(10^3, {
  rs      <- sample(c("Below", "Above"),
                    size = length(y),
                    prob = c(py_hat, 1-py_hat),
                    replace = TRUE)
isabove <- rs == "Above"
mean(isabove)
})
quantile(py_hat_bt, c(0.015, 0.985))


##      1.5%     98.5%
## 0.2399021 0.3072215
## > > > . + > > >
## BOOTSTRAP CONFIDENCE INTERVAL CALCULATIONS
## Based on 1000 bootstrap replicates
##
## CALL :
## boot.ci(boot.out = py_hat_boot, conf = 0.97, type = "bca")
##
## Intervals :
## Level       BCa
## 97%   ( 0.2399,  0.3072 )
## Calculations and Intervals on Original Scale
#+end_src
** 8.1.7 Is the Number of Friends Independent to the Number of Followers
